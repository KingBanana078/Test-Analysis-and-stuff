Index: DTFE_with_intensity.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv, math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.spatial import SphericalVoronoi, ConvexHull\nfrom scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator, Rbf\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.colors as mcolors\n\ndef read_csv(filename):\n    with open(filename) as csvfile:\n        reader = csv.reader(csvfile)\n        return np.array([list(map(float, row)) for row in reader])\n\n#lat&lon to cartesian\ndef transform_coordinates(hot_spots_data):\n    lon_rad = np.radians(180 - hot_spots_data[:, 1])\n    lat_rad = np.radians(hot_spots_data[:, 0])\n\n    r = 1\n\n    x = r * np.cos(lat_rad) * np.cos(lon_rad)\n    y = r * np.cos(lat_rad) * np.sin(lon_rad)\n    z = r * np.sin(lat_rad)\n\n    #print(\"Cartesian Coordinates (x,y,z):\", x,y,z)\n\n    return np.column_stack([x, y, z])\n#cartesian to spherical\ndef cartesian_to_spherical(x, y, z):\n    r = np.sqrt(x**2 + y**2 + z**2)\n    theta = np.arccos(z / r)  \n    phi = np.arctan2(y, x)  \n\n    #print(\"Spherical Coordinates (r, θ, φ):\", r,theta,phi)\n    \n    return np.column_stack([r, theta, phi])\n\n#OK\ndef Mollweide_plot_points(hot_spots_data):\n\n    theta = 180 - hot_spots_data[:, 1]  # Adjust longitude\n    phi = hot_spots_data[:, 0]     # Adjust latitude\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.scatter(np.radians(theta), np.radians(phi))\n    plt.show()\n\n    #points = np.column_stack([ theta, phi])\n    #print(points)\n    return \n\ndef compute_voronoi(points):\n    points = np.asarray(points)\n    points /= np.linalg.norm(points, axis=1)[:, np.newaxis]\n    sv = SphericalVoronoi(points, radius=1, center=[0, 0, 0])\n    sv.sort_vertices_of_regions()\n\n    return sv\n\ndef compute_area(sv):\n    areas = sv.calculate_areas()\n    #density = 1/areas\n    #print(areas)\n    #print(len(areas))\n    #print(np.sum(areas))\n    return areas\n\ndef plot_voronoi_cells(sv, areas):\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    densities = 1 / areas\n    max_density = max(densities)\n\n    for i, region in enumerate(sv.regions):\n        if len(region) > 0: \n            polygon = sv.vertices[region]\n            if len(polygon) >= 3:\n                # Use Poly3DCollection for 3D polygons\n                color = mcolors.to_rgba(cm.plasma(densities[i] / max_density))  # Convert density to color\n                poly3d = Poly3DCollection([polygon], facecolors=color, linewidths=1, edgecolors='k', alpha=0.6)\n                ax.add_collection3d(poly3d)\n\n    # Set axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    ax.set_title('Spherical Voronoi Diagram with Density')\n\n    plt.show()\n\ndef compute_centroids(vertices, regions):\n    centroids = []\n    for region in regions:\n        if len(region) < 3:  # Skip degenerate regions with fewer than 3 vertices\n            centroids.append([0, 0, 0])\n            continue\n        polygon = vertices[region]\n        centroid = np.mean(polygon, axis=0)\n        centroids.append(centroid)\n        #print(polygon)\n        #print(len(centroids))\n    return np.array(centroids)\n\ndef interpolator_rbf(centroids, areas):\n    #theta = np.radians(centroids[:, 2])  # Convert longitude to radians\n    #phi = np.radians(centroids[:, 1])  # Convert latitude to radians\n\n    # Convert to Cartesian coordinates for RBF interpolation\n    #x = np.cos(phi) * np.cos(theta)\n    #y = np.cos(phi) * np.sin(theta)\n    #z = np.sin(phi)\n\n    areas = np.array(areas)\n    densities = 1 / areas\n\n    rbf = Rbf(centroids[:, 0], centroids[:, 1], centroids[:, 2], densities, function='linear')\n    #rbf = Rbf(x, y, z, densities, function='linear')  # 'linear', 'cubic', 'multiquadric', etc.\n\n    return rbf\n\ndef mollweide_plot(centroids, data, interpolator=None):\n    theta = np.radians(centroids[:, 2])  \n    phi = np.radians(centroids[:, 1]) \n\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.grid(True, linestyle=\"--\", linewidth=0.5, alpha=0.7)\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    max_density = max(data)\n    norm = plt.Normalize(vmin=0, vmax=max_density)\n    cmap = plt.cm.plasma\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Required for colorbar\n\n    if interpolator:\n        # Create grid for interpolation\n        theta_grid, phi_grid = np.meshgrid(np.linspace(-np.pi, np.pi, 360), np.linspace(-np.pi/2, np.pi/2, 360))\n\n        # Convert grid points to Cartesian coordinates\n        x_grid = np.cos(phi_grid) * np.cos(theta_grid)\n        y_grid = np.cos(phi_grid) * np.sin(theta_grid)\n        z_grid = np.sin(phi_grid)\n\n        # Interpolate densities using RBF\n        grid_densities = interpolator(x_grid, y_grid, z_grid).reshape(theta_grid.shape)\n\n        # Plot interpolated grid with proper normalization\n        ax.pcolormesh(theta_grid, phi_grid, grid_densities, shading='auto', cmap='plasma', norm=norm)\n\n\n    # Add color bar (legend)\n    cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)\n    cbar.set_label('Instensity')\n\n    ax.set_title('Voronoi Intensity on Mollweide Projection')\n    plt.show()\n\n\n#----- INTENSITY ADJUSTMENTS START HERE -----#\n\ndef read_power_area_csv():\n    with open('powerANDarea.csv') as power:\n        reader = csv.reader(power)\n        powerandarea = list(reader)\n        for i in range(len(powerandarea)): \n            for j in range(len(powerandarea[i])):\n                powerandarea[i][j]=float(powerandarea[i][j])\n        power_data = np.array([row[0] for row in powerandarea])\n        area_data = np.array([row[1] for row in powerandarea])\n        return power_data, area_data\n\n\ndef read_temp_csv():\n    with open('Temperature.csv') as temp:\n        reader = csv.reader(temp)\n        return [list(map(float, row)) for row in reader]\n\ndef main():\n    filename = 'Positiondata.csv'\n    hot_spots_data = read_csv(filename)\n    powers, areas = read_power_area_csv()\n    temps = read_temp_csv()\n    points = transform_coordinates(hot_spots_data)\n\n    mask = areas != 0\n    mask4 = temps != 0\n\n    points1, area_data_1, power_data_1 = points[mask], areas[mask], powers[mask]\n    intensity1 = np.sort(power_data_1 / area_data_1)\n\n    sv = compute_voronoi(points1)\n    #print((sv.vertices)\n    areas_vor = compute_area(sv)\n    densities = 1/areas_vor\n\n    plot_voronoi_cells(sv, areas_vor)\n    centroids = compute_centroids(sv.vertices, sv.regions)\n    \n\n    interpolator = NearestNDInterpolator(centroids, intensity1)\n    #interpolator = interpolator_rbf(centroids, 1/intensity1)\n\n    mollweide_plot(centroids, intensity1, interpolator)\n    #print(intensity1)\n\nif __name__ == \"__main__\":\n    main()\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTFE_with_intensity.py b/DTFE_with_intensity.py
--- a/DTFE_with_intensity.py	(revision 5a4cf8eef4b3cd94fe14c611aeac22b0e5ff5741)
+++ b/DTFE_with_intensity.py	(date 1745835277250)
@@ -157,7 +157,7 @@
 
     # Add color bar (legend)
     cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)
-    cbar.set_label('Instensity')
+    cbar.set_label('Intensity (GW/km^2)')
 
     ax.set_title('Voronoi Intensity on Mollweide Projection')
     plt.show()
Index: DTFE_with_intensity copy 2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv, math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.spatial import SphericalVoronoi, ConvexHull\nfrom scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator, Rbf\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.colors as mcolors\n\ndef read_temp_csv():\n    with open('Temperature.csv') as temp:\n        reader = csv.reader(temp)\n        return [list(map(float, row)) for row in reader]\n\n\ndef read_csv(filename):\n    with open(filename) as csvfile:\n        reader = csv.reader(csvfile)\n        return np.array([list(map(float, row)) for row in reader])\n\n#lat&lon to cartesian\ndef transform_coordinates(hot_spots_data):\n    lon_rad = np.radians(180 - hot_spots_data[:, 1])\n    lat_rad = np.radians(hot_spots_data[:, 0])\n\n    r = 1\n\n    x = r * np.cos(lat_rad) * np.cos(lon_rad)\n    y = r * np.cos(lat_rad) * np.sin(lon_rad)\n    z = r * np.sin(lat_rad)\n\n    #print(\"Cartesian Coordinates (x,y,z):\", x,y,z)\n\n    return np.column_stack([x, y, z])\n#cartesian to spherical\ndef cartesian_to_spherical(x, y, z):\n    r = np.sqrt(x**2 + y**2 + z**2)\n    theta = np.arccos(z / r)  \n    phi = np.arctan2(y, x)  \n\n    #print(\"Spherical Coordinates (r, θ, φ):\", r,theta,phi)\n    \n    return np.column_stack([r, theta, phi])\n\n#OK\ndef Mollweide_plot_points(hot_spots_data):\n\n    theta = 180 - hot_spots_data[:, 1]  # Adjust longitude\n    phi = hot_spots_data[:, 0]     # Adjust latitude\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.scatter(np.radians(theta), np.radians(phi))\n    plt.show()\n\n    #points = np.column_stack([ theta, phi])\n    #print(points)\n    return \n\ndef compute_voronoi(points):\n    points = np.asarray(points)\n    points /= np.linalg.norm(points, axis=1)[:, np.newaxis]\n    sv = SphericalVoronoi(points, radius=1, center=[0, 0, 0])\n    sv.sort_vertices_of_regions()\n\n    return sv\n\ndef compute_area(sv):\n    areas = sv.calculate_areas()\n    #density = 1/areas\n    #print(areas)\n    #print(len(areas))\n    #print(np.sum(areas))\n    return areas\n\ndef plot_voronoi_cells(sv, areas):\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    densities = 1 / areas\n    max_density = max(densities)\n\n    for i, region in enumerate(sv.regions):\n        if len(region) > 0: \n            polygon = sv.vertices[region]\n            if len(polygon) >= 3:\n                # Use Poly3DCollection for 3D polygons\n                color = mcolors.to_rgba(cm.cividis(densities[i] / max_density))  # Convert density to color\n                poly3d = Poly3DCollection([polygon], facecolors=color, linewidths=1, edgecolors='k', alpha=0.6)\n                ax.add_collection3d(poly3d)\n\n    # Set axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    ax.set_title('Spherical Voronoi Diagram with Density')\n\n    plt.show()\n\ndef compute_centroids(vertices, regions):\n    centroids = []\n    for region in regions:\n        if len(region) < 3:  # Skip degenerate regions with fewer than 3 vertices\n            centroids.append([0, 0, 0])\n            continue\n        polygon = vertices[region]\n        centroid = np.mean(polygon, axis=0)\n        centroids.append(centroid)\n        #print(polygon)\n        #print(len(centroids))\n    return np.array(centroids)\n\ndef interpolator_rbf(centroids, areas):\n    #theta = np.radians(centroids[:, 2])  # Convert longitude to radians\n    #phi = np.radians(centroids[:, 1])  # Convert latitude to radians\n\n    # Convert to Cartesian coordinates for RBF interpolation\n    #x = np.cos(phi) * np.cos(theta)\n    #y = np.cos(phi) * np.sin(theta)\n    #z = np.sin(phi)\n\n    areas = np.array(areas)\n    densities = 1 / areas\n\n    rbf = Rbf(centroids[:, 0], centroids[:, 1], centroids[:, 2], densities, function='multiquadric')\n    #rbf = Rbf(x, y, z, densities, function='linear')  # 'linear', 'cubic', 'multiquadric', etc.\n\n    return rbf\n\ndef mollweide_plot(centroids, data, interpolator=None):\n    theta = np.radians(centroids[:, 2])  \n    phi = np.radians(centroids[:, 1]) \n\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.grid(True, linestyle=\"--\", linewidth=0.5, alpha=0.7)\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    max_density = max(data)\n    norm = plt.Normalize(vmin=0, vmax=max_density)\n    cmap = plt.cm.plasma\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Required for colorbar\n\n    if interpolator:\n        # Create grid for interpolation\n        theta_grid, phi_grid = np.meshgrid(np.linspace(-np.pi, np.pi, 360), np.linspace(-np.pi/2, np.pi/2, 360))\n\n        # Convert grid points to Cartesian coordinates\n        x_grid = np.cos(phi_grid) * np.cos(theta_grid)\n        y_grid = np.cos(phi_grid) * np.sin(theta_grid)\n        z_grid = np.sin(phi_grid)\n\n        # Interpolate densities using RBF\n        grid_densities = interpolator(x_grid, y_grid, z_grid).reshape(theta_grid.shape)\n\n        # Plot interpolated grid with proper normalization\n        ax.pcolormesh(theta_grid, phi_grid, grid_densities, shading='auto', cmap='plasma', norm=norm)\n\n\n    # Add color bar (legend)\n    cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)\n    cbar.set_label('Instensity')\n\n    ax.set_title('Voronoi Intensity on Mollweide Projection')\n    plt.show()\n\n\n#----- INTENSITY ADJUSTMENTS START HERE -----#\n\ndef read_power_area_csv():\n    with open('powerANDarea.csv') as power:\n        reader = csv.reader(power)\n        powerandarea = list(reader)\n        for i in range(len(powerandarea)): \n            for j in range(len(powerandarea[i])):\n                powerandarea[i][j]=float(powerandarea[i][j])\n        power_data = np.array([row[0] for row in powerandarea])\n        area_data = np.array([row[1] for row in powerandarea])\n        return power_data, area_data\n\n\ndef read_temp_csv():\n    with open('Temperature.csv') as temp:\n        reader = csv.reader(temp)\n        return [list(map(float, row)) for row in reader]\n\ndef main():\n    filename = 'Positiondata.csv'\n    hot_spots_data = read_csv(filename)\n    powers, areas = read_power_area_csv()\n    powers = powers[:-2]\n    temps = read_temp_csv()\n    points = transform_coordinates(hot_spots_data)\n    print(len(powers))\n    mask = areas != 0\n    mask4 = temps != 0\n    r_io = 1821 #km\n    #points1, area_data_1, power_data_1 = points[mask], areas[mask], powers[mask]\n    \n\n    sv = compute_voronoi(points[:-2])\n    #print((sv.vertices)\n    areas_vor = compute_area(sv)*r_io**2\n    areas_vor = areas_vor\n    densities = 1/areas_vor\n    intensity1 = np.sort(powers / areas_vor)\n\n    plot_voronoi_cells(sv, areas_vor)\n    centroids = compute_centroids(sv.vertices, sv.regions)\n    \n\n    interpolator = NearestNDInterpolator(centroids, intensity1)\n    #interpolator = interpolator_rbf(centroids, 1/intensity1)\n\n    mollweide_plot(centroids, intensity1, interpolator)\n    #print(intensity1)\n\nif __name__ == \"__main__\":\n    main()\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTFE_with_intensity copy 2.py b/DTFE_with_intensity copy 2.py
--- a/DTFE_with_intensity copy 2.py	(revision 5a4cf8eef4b3cd94fe14c611aeac22b0e5ff5741)
+++ b/DTFE_with_intensity copy 2.py	(date 1745834087237)
@@ -163,7 +163,7 @@
 
     # Add color bar (legend)
     cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)
-    cbar.set_label('Instensity')
+    cbar.set_label('Intensity (GW/km^2)')
 
     ax.set_title('Voronoi Intensity on Mollweide Projection')
     plt.show()
@@ -192,7 +192,7 @@
     filename = 'Positiondata.csv'
     hot_spots_data = read_csv(filename)
     powers, areas = read_power_area_csv()
-    powers = powers[:-2]
+    powers = powers[:-1]
     temps = read_temp_csv()
     points = transform_coordinates(hot_spots_data)
     print(len(powers))
@@ -202,7 +202,7 @@
     #points1, area_data_1, power_data_1 = points[mask], areas[mask], powers[mask]
     
 
-    sv = compute_voronoi(points[:-2])
+    sv = compute_voronoi(points[:-1])
     #print((sv.vertices)
     areas_vor = compute_area(sv)*r_io**2
     areas_vor = areas_vor
Index: Project_Io.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\nimport numpy as np\nimport matplotlib.pyplot  as plt\nimport math\n\n\nfrom scipy.interpolate import Rbf, RBFInterpolator\nfrom scipy.spatial import Delaunay, SphericalVoronoi, geometric_slerp\nfrom mpl_toolkits.mplot3d import proj3d\n\n\nwith open('Positiondata.csv') as csvfile:\n    reader = csv.reader(csvfile)\n    hot_spots_data = list(reader)\n\nhot_spots_data = np.array(hot_spots_data, dtype=float)\n\nlongitude = hot_spots_data[:, 1]\nlatitude = hot_spots_data[:, 0]\n\n\"\"\"triangulations = Delaunay(hot_spots_data)\n\nplt.triplot(hot_spots_data[:, 0], hot_spots_data[:, 1], triangulations.simplices)\nplt.plot(hot_spots_data[:, 0], hot_spots_data[:, 1], 'o')\nplt.show()\"\"\"\n\nx = []\ny = []\nz = []\n\ntheta = hot_spots_data[:, 1]\nphi = hot_spots_data[:, 0]\nr = np.ones(343)\n\ntheta_prime = 180-theta\nplt.scatter(theta_prime, phi)\nplt.show()\n\nfor i in range(len(theta)):\n    value = 180-theta[i]\n    theta[i]=value\nfor i in range(len(theta)):\n    value = 90-phi[i]\n    phi[i]=value\n\nplt.scatter(theta, phi)\nplt.show()\n\nfor i in range(343):\n    x.append(float((r[i]*np.cos(theta[i]/180*np.pi)*np.sin(phi[i]/180*np.pi))))\n    y.append(float((r[i]*np.sin(theta[i]/180*np.pi)*np.sin(phi[i]/180*np.pi))))\n    z.append(float((r[i]*np.cos(phi[i]/180*np.pi))))\n\npoint = []\nfor k in range(343):\n    point.append([x[k], y[k], z[k]])\n\nprint(point)\n\n\npoints = np.array(point)\nradius = 1\ncenter = np.array([0, 0, 0])\nsv = SphericalVoronoi(points, radius, center)\n# sort vertices (optional, helpful for plotting)\nsv.sort_vertices_of_regions()\nt_vals = np.linspace(0, 1, 2000)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n# plot the unit sphere for reference (optional)\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = np.outer(np.cos(u), np.sin(v))\ny = np.outer(np.sin(u), np.sin(v))\nz = np.outer(np.ones(np.size(u)), np.cos(v))\nax.plot_surface(x, y, z, color='y', alpha=0.1)\n# plot generator points\nax.scatter(points[:, 0], points[:, 1], points[:, 2], c='b')\n# plot Voronoi vertices\nax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2],\n                   c='g')\n\n\n\n\n# indicate Voronoi regions (as Euclidean polygons)\nfor region in sv.regions:\n   n = len(region)\n   for i in range(n):\n       start = sv.vertices[region][i]\n       end = sv.vertices[region][(i + 1) % n]\n       result = geometric_slerp(start, end, t_vals)\n       ax.plot(result[..., 0],\n               result[..., 1],\n               result[..., 2],\n               c='k')\n\n               \n'''\nax.azim = 10\nax.elev = 40\n_ = ax.set_xticks([])\n_ = ax.set_yticks([])\n_ = ax.set_zticks([])\nfig.set_size_inches(10, 10)\nplt.show()\n'''\n\nareas = sv.calculate_areas()\n\n\n\n# Compute centroids of Voronoi regions\ncentroids = np.array([np.mean(sv.vertices[region], axis=0) for region in sv.regions])\n\n# Normalize centroids to lie on the unit sphere\ncentroids /= np.linalg.norm(centroids, axis=1)[:, np.newaxis]\n\n# Define density as inverse of area (higher area = lower density)\ndensities = 1 / (areas)\n\nX_change = np.column_stack((centroids[:, 0], centroids[:, 1], centroids[:, 2]))\nY_change = densities\n\n# Create interpolation function (RBF) using centroids\nrbf = RBFInterpolator(X_change, Y_change,  kernel= \"linear\")\nprint(rbf)\n# Generate grid for visualization\n\n#here is an error, cannot find where\nnum_grid = 360\ngrid_theta = np.linspace(-np.pi, np.pi, num_grid)\ngrid_phi = np.linspace(-np.pi/2, np.pi/2, num_grid)\nphi_grid, theta_grid = np.meshgrid(grid_phi, grid_theta)\nx_grid = np.sin(theta_grid) * np.cos(phi_grid)\ny_grid = np.sin(theta_grid) * np.sin(phi_grid)\nz_grid = np.cos(theta_grid)\n\n# Interpolate density on grid\ndensity_grid = rbf(np.column_stack((x_grid.ravel(), y_grid.ravel(), z_grid.ravel()))).reshape(x_grid.shape)\n\n\n#above is an error\n\n\n# Plot the density map\nplt.figure(figsize=(10, 5))\nplt.pcolormesh(np.linspace(-180, 180, num_grid), np.linspace(-90, 90, num_grid), density_grid, shading='auto', cmap='viridis')\nplt.colorbar(label='Density')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Interpolated Density Field from Spherical Voronoi')\nplt.show()\n\n\nprint(len(density_grid))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project_Io.py b/Project_Io.py
--- a/Project_Io.py	(revision 5a4cf8eef4b3cd94fe14c611aeac22b0e5ff5741)
+++ b/Project_Io.py	(date 1746083635027)
@@ -1,6 +1,6 @@
 import csv
 import numpy as np
-import matplotlib.pyplot  as plt
+import matplotlib.pyplot as plt
 import math
 
 
Index: DTFE_with_intensity copy.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv, math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.spatial import SphericalVoronoi, ConvexHull\nfrom scipy.interpolate import LinearNDInterpolator, NearestNDInterpolator, Rbf\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.colors as mcolors\n\ndef read_csv(filename):\n    with open(filename) as csvfile:\n        reader = csv.reader(csvfile)\n        return np.array([list(map(float, row)) for row in reader])\n\n#lat&lon to cartesian\ndef transform_coordinates(hot_spots_data):\n    lon_rad = np.radians(180 - hot_spots_data[0:342, 1])\n    lat_rad = np.radians(hot_spots_data[0:342, 0])\n\n    r = 1\n\n    x = r * np.cos(lat_rad) * np.cos(lon_rad)\n    y = r * np.cos(lat_rad) * np.sin(lon_rad)\n    z = r * np.sin(lat_rad)\n\n    #print(\"Cartesian Coordinates (x,y,z):\", x,y,z)\n\n    return np.column_stack([x, y, z])\n#cartesian to spherical\ndef cartesian_to_spherical(x, y, z):\n    r = np.sqrt(x**2 + y**2 + z**2)\n    theta = np.arccos(z / r)  \n    phi = np.arctan2(y, x)  \n\n    #print(\"Spherical Coordinates (r, θ, φ):\", r,theta,phi)\n    \n    return np.column_stack([r, theta, phi])\n\n#OK\ndef Mollweide_plot_points(hot_spots_data):\n\n    theta = 180 - hot_spots_data[0:342, 1]  # Adjust longitude\n    phi = hot_spots_data[0:342, 0]     # Adjust latitude\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.scatter(np.radians(theta), np.radians(phi))\n    plt.show()\n\n    #points = np.column_stack([ theta, phi])\n    #print(points)\n    return \n\ndef compute_voronoi(points):\n    points = np.asarray(points)\n    points /= np.linalg.norm(points, axis=1)[:, np.newaxis]\n    sv = SphericalVoronoi(points, radius=1, center=[0, 0, 0])\n    sv.sort_vertices_of_regions()\n\n    return sv\n\ndef compute_area(sv):\n    areas = sv.calculate_areas()\n    #density = 1/areas\n    #print(areas)\n    #print(len(areas))\n    #print(np.sum(areas))\n    return areas\n\ndef plot_voronoi_cells(sv, areas):\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    densities = 1 / areas\n    max_density = max(densities)\n\n    for i, region in enumerate(sv.regions):\n        if len(region) > 0: \n            polygon = sv.vertices[region]\n            if len(polygon) >= 3:\n                # Use Poly3DCollection for 3D polygons\n                color = mcolors.to_rgba(cm.plasma(densities[i] / max_density))  # Convert density to color\n                poly3d = Poly3DCollection([polygon], facecolors=color, linewidths=1, edgecolors='k', alpha=0.6)\n                ax.add_collection3d(poly3d)\n\n    # Set axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    ax.set_title('Spherical Voronoi Diagram with Density')\n\n    plt.show()\n\ndef compute_centroids(vertices, regions):\n    centroids = []\n    for region in regions:\n        if len(region) < 3:  # Skip degenerate regions with fewer than 3 vertices\n            centroids.append([0, 0, 0])\n            continue\n        polygon = vertices[region]\n        centroid = np.mean(polygon, axis=0)\n        centroids.append(centroid)\n        #print(polygon)\n        #print(len(centroids))\n    return np.array(centroids)\n\ndef interpolator_rbf(centroids, areas):\n    #theta = np.radians(centroids[:, 2])  # Convert longitude to radians\n    #phi = np.radians(centroids[:, 1])  # Convert latitude to radians\n\n    # Convert to Cartesian coordinates for RBF interpolation\n    #x = np.cos(phi) * np.cos(theta)\n    #y = np.cos(phi) * np.sin(theta)\n    #z = np.sin(phi)\n\n    areas = np.array(areas)\n    densities = 1 / areas\n\n    rbf = Rbf(centroids[:, 0], centroids[:, 1], centroids[:, 2], densities, function='linear')\n    #rbf = Rbf(x, y, z, densities, function='linear')  # 'linear', 'cubic', 'multiquadric', etc.\n\n    return rbf\n\ndef mollweide_plot(centroids, data, interpolator=None):\n    theta = np.radians(centroids[:, 2])  \n    phi = np.radians(centroids[:, 1]) \n\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111, projection='mollweide')\n    ax.grid(True, linestyle=\"--\", linewidth=0.5, alpha=0.7)\n    #ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2], color='c', s=50, label='Sites')\n\n    max_density = max(data)\n    norm = plt.Normalize(vmin=0, vmax=max_density)\n    cmap = plt.cm.plasma\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Required for colorbar\n\n    if interpolator:\n        # Create grid for interpolation\n        theta_grid, phi_grid = np.meshgrid(np.linspace(-np.pi, np.pi, 360), np.linspace(-np.pi/2, np.pi/2, 360))\n\n        # Convert grid points to Cartesian coordinates\n        x_grid = np.cos(phi_grid) * np.cos(theta_grid)\n        y_grid = np.cos(phi_grid) * np.sin(theta_grid)\n        z_grid = np.sin(phi_grid)\n\n        # Interpolate densities using RBF\n        grid_densities = interpolator(x_grid, y_grid, z_grid).reshape(theta_grid.shape)\n\n        # Plot interpolated grid with proper normalization\n        ax.pcolormesh(theta_grid, phi_grid, grid_densities, shading='auto', cmap='plasma', norm=norm)\n\n\n    # Add color bar (legend)\n    cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)\n    cbar.set_label('Instensity')\n\n    ax.set_title('Voronoi Intensity on Mollweide Projection')\n    plt.show()\n\n\n#----- INTENSITY ADJUSTMENTS START HERE -----#\n\ndef read_power_area_csv():\n    with open('powerANDarea.csv') as power:\n        reader = csv.reader(power)\n        powerandarea = list(reader)\n        for i in range(len(powerandarea)): \n            for j in range(len(powerandarea[i])):\n                powerandarea[i][j]=float(powerandarea[i][j])\n        power_data = np.array([row[0] for row in powerandarea])\n        area_data = np.array([row[1] for row in powerandarea])\n        power_data = power_data[:-1]\n        area_data = area_data[:-1]\n        return power_data, area_data\n\n\ndef read_temp_csv():\n    with open('Temperature.csv') as temp:\n        reader = csv.reader(temp)\n        return [list(map(float, row)) for row in reader]\n\ndef main():\n    filename = 'Positiondata.csv'\n    hot_spots_data = read_csv(filename)\n    powers, areas = read_power_area_csv()\n    temps = read_temp_csv()\n    points = transform_coordinates(hot_spots_data)\n\n    mask = areas != 0\n    mask4 = temps != 0\n    \n\n    points1, area_data_1, power_data_1 = points[mask], areas[mask], powers[mask]\n    #points1 = points1 [ :-1]\n    intensity1 =(np.sort(power_data_1 / area_data_1))\n    #intensity1 = intensity1[:-1]\n    sv = compute_voronoi(points1)\n    #print((sv.vertices)\n    areas_vor = compute_area(sv)\n    densities = 1/areas_vor\n    print(len(area_data_1))\n    plot_voronoi_cells(sv, area_data_1)\n    centroids = compute_centroids(sv.vertices, sv.regions)\n    \n\n    interpolator = NearestNDInterpolator(centroids, intensity1)\n    #interpolator = interpolator_rbf(centroids, 1/intensity1)\n\n    mollweide_plot(centroids, intensity1, interpolator)\n    print(len(powers))\n\nif __name__ == \"__main__\":\n    main()\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DTFE_with_intensity copy.py b/DTFE_with_intensity copy.py
--- a/DTFE_with_intensity copy.py	(revision 5a4cf8eef4b3cd94fe14c611aeac22b0e5ff5741)
+++ b/DTFE_with_intensity copy.py	(date 1745834179942)
@@ -157,7 +157,7 @@
 
     # Add color bar (legend)
     cbar = fig.colorbar(sm, ax=ax, orientation='vertical', shrink=0.7, pad=0.1)
-    cbar.set_label('Instensity')
+    cbar.set_label('Intensity (GW/km^2)')
 
     ax.set_title('Voronoi Intensity on Mollweide Projection')
     plt.show()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"14cc7e8d-200b-4631-a0bb-462969562d43\" name=\"Changes\" comment=\"Update\">\n      <change afterPath=\"$PROJECT_DIR$/SHamonics.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Spherical Harmonics Draft.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Spherical Harmonics Draft.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 3\n}</component>\n  <component name=\"ProjectId\" id=\"2u7ndY975eCC6Ls2C65Xbl0CKcg\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Python.Project_I0_with_power_tryingstuff.executor\": \"Run\",\n    \"Python.Project_Io.executor\": \"Run\",\n    \"Python.SHamonics.executor\": \"Run\",\n    \"Python.Spherical Harmonics Draft.executor\": \"Run\",\n    \"Python.Test.executor\": \"Run\",\n    \"Python.Test2.executor\": \"Run\",\n    \"Python.main.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-PY-241.14494.241\" />\n        <option value=\"bundled-python-sdk-0509580d9d50-28c9f5db9ffe-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.14494.241\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"14cc7e8d-200b-4631-a0bb-462969562d43\" name=\"Changes\" comment=\"\" />\n      <created>1741608568762</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1741608568762</updated>\n      <workItem from=\"1741608569514\" duration=\"160000\" />\n      <workItem from=\"1741794529590\" duration=\"20000\" />\n      <workItem from=\"1741852637917\" duration=\"7301000\" />\n      <workItem from=\"1741872319344\" duration=\"594000\" />\n      <workItem from=\"1741874166927\" duration=\"905000\" />\n      <workItem from=\"1741888379527\" duration=\"599000\" />\n      <workItem from=\"1742198277717\" duration=\"6344000\" />\n      <workItem from=\"1742207710958\" duration=\"1612000\" />\n      <workItem from=\"1742456875736\" duration=\"7672000\" />\n      <workItem from=\"1742802280229\" duration=\"9415000\" />\n      <workItem from=\"1742818870238\" duration=\"3148000\" />\n      <workItem from=\"1743061594055\" duration=\"4788000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"So that i can pull origin\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742457022360</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742457022360</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742458908629</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742458908629</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742458927184</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742458927184</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742459489657</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742459489657</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742459840838</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742459840838</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742461782418</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742461782418</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742462028221</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742462028221</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1742808180538</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1742808180538</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"9\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"So that i can pull origin\" />\n    <MESSAGE value=\"Update\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$Spherical_Harmonics_Draft.coverage\" NAME=\"Spherical Harmonics Draft Coverage Results\" MODIFIED=\"1743066140619\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1743062784414\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$Test.coverage\" NAME=\"Test Coverage Results\" MODIFIED=\"1742202317181\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$Project_Io.coverage\" NAME=\"Project_Io Coverage Results\" MODIFIED=\"1742459827683\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$Test2.coverage\" NAME=\"Test2 Coverage Results\" MODIFIED=\"1742202102890\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$Project_I0_with_power_tryingstuff.coverage\" NAME=\"Project_I0_with_power_tryingstuff Coverage Results\" MODIFIED=\"1742208030664\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Test_Analysis_and_stuff$SHamonics.coverage\" NAME=\"SHamonics Coverage Results\" MODIFIED=\"1743065933689\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5a4cf8eef4b3cd94fe14c611aeac22b0e5ff5741)
+++ b/.idea/workspace.xml	(date 1746083673670)
@@ -5,9 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="14cc7e8d-200b-4631-a0bb-462969562d43" name="Changes" comment="Update">
-      <change afterPath="$PROJECT_DIR$/SHamonics.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Spherical Harmonics Draft.py" beforeDir="false" afterPath="$PROJECT_DIR$/Spherical Harmonics Draft.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DTFE_with_intensity copy 2.py" beforeDir="false" afterPath="$PROJECT_DIR$/DTFE_with_intensity copy 2.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DTFE_with_intensity copy.py" beforeDir="false" afterPath="$PROJECT_DIR$/DTFE_with_intensity copy.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DTFE_with_intensity.py" beforeDir="false" afterPath="$PROJECT_DIR$/DTFE_with_intensity.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project_Io.py" beforeDir="false" afterPath="$PROJECT_DIR$/Project_Io.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -32,25 +34,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.Project_I0_with_power_tryingstuff.executor": "Run",
-    "Python.Project_Io.executor": "Run",
-    "Python.SHamonics.executor": "Run",
-    "Python.Spherical Harmonics Draft.executor": "Run",
-    "Python.Test.executor": "Run",
-    "Python.Test2.executor": "Run",
-    "Python.main.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.DTFE_with_intensity copy 2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.DTFE_with_intensity copy.executor&quot;: &quot;Run&quot;,
+    &quot;Python.DTFE_with_intensity.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Project_I0_with_power_tryingstuff.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Project_Io.executor&quot;: &quot;Run&quot;,
+    &quot;Python.SHamonics.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Spherical Harmonics Draft.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Test.executor&quot;: &quot;Run&quot;,
+    &quot;Python.Test2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -79,6 +84,14 @@
       <workItem from="1742802280229" duration="9415000" />
       <workItem from="1742818870238" duration="3148000" />
       <workItem from="1743061594055" duration="4788000" />
+      <workItem from="1745838646749" duration="598000" />
+      <workItem from="1745847477293" duration="1253000" />
+      <workItem from="1745927224257" duration="985000" />
+      <workItem from="1745936767872" duration="6000" />
+      <workItem from="1745943338403" duration="757000" />
+      <workItem from="1746003056579" duration="676000" />
+      <workItem from="1746015641154" duration="603000" />
+      <workItem from="1746082804457" duration="867000" />
     </task>
     <task id="LOCAL-00001" summary="So that i can pull origin">
       <option name="closed" value="true" />
@@ -156,12 +169,19 @@
     <option name="LAST_COMMIT_MESSAGE" value="Update" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Spherical_Harmonics_Draft.coverage" NAME="Spherical Harmonics Draft Coverage Results" MODIFIED="1743066140619" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$main.coverage" NAME="main Coverage Results" MODIFIED="1743062784414" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Test.coverage" NAME="Test Coverage Results" MODIFIED="1742202317181" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Project_Io.coverage" NAME="Project_Io Coverage Results" MODIFIED="1742459827683" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$main.coverage" NAME="main Coverage Results" MODIFIED="1743789551691" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$SH.coverage" NAME="SH Coverage Results" MODIFIED="1745487532139" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Test.coverage" NAME="Test Coverage Results" MODIFIED="1745504390683" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$with_intensity.coverage" NAME="with_intensity Coverage Results" MODIFIED="1743094727994" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Project_Io.coverage" NAME="Project_Io Coverage Results" MODIFIED="1743094704563" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$DTFE_without_Intensity.coverage" NAME="DTFE_without_Intensity Coverage Results" MODIFIED="1745504557137" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Project_I0_with_power_tryingstuff.coverage" NAME="Project_I0_with_power_tryingstuff Coverage Results" MODIFIED="1742208030664" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$SHamonics.coverage" NAME="SHamonics Coverage Results" MODIFIED="1745324528411" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Spherical_Harmonics_Draft.coverage" NAME="Spherical Harmonics Draft Coverage Results" MODIFIED="1745481144961" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$DTFE_with_intensity.coverage" NAME="DTFE_with_intensity Coverage Results" MODIFIED="1745836480226" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$DTFE_with_intensity_copy.coverage" NAME="DTFE_with_intensity copy Coverage Results" MODIFIED="1745834179955" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Test2.coverage" NAME="Test2 Coverage Results" MODIFIED="1742202102890" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$Project_I0_with_power_tryingstuff.coverage" NAME="Project_I0_with_power_tryingstuff Coverage Results" MODIFIED="1742208030664" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$SHamonics.coverage" NAME="SHamonics Coverage Results" MODIFIED="1743065933689" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$testing.coverage" NAME="testing Coverage Results" MODIFIED="1743094789296" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Test_Analysis_and_stuff$DTFE_with_intensity_copy_2.coverage" NAME="DTFE_with_intensity copy 2 Coverage Results" MODIFIED="1745836495473" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
